# 接頭句で管理

リソース、タグ名
fullstack-01

# 接頭句で管理しづらい

イメージリポジトリ

フロント kurosawakuro/frontend-3000
バック kurosawakuro/backend-8080


# クレデンシャル管理
/app/production


## Next.js + Gin を Fargate にデプロイする計画

### 第一段階: Minimum 作戦

- **Fargate クラスター** を作成
- **デフォルト VPC** を使用
- **デフォルトサブネット** を利用
- **ロードバランサー無し** でデプロイ

### 第二段階: ALB あり

- **Application Load Balancer (ALB) を追加**
- **ALB経由でバックエンドとフロントエンドの通信を確立**
- **適切なセキュリティグループとターゲットグループを設定**

### どの段階まで一気に進めるべきか？

- **第一段階 (最低限の疎通確認) をまず完了させる**
- **フルスタックのコードが既に疎通可能なら、一気に ALB ありの構成まで進めるのも可**
- **作業負担やトラブルシューティングを考慮し、分割して進めるのが無難**

### デプロイの順番

1. **バックエンドのみデプロイするべきか？**
   - 先にバックエンドをデプロイして API の動作を確認するのが一般的
   - ただし、ロードバランサー (ALB) を使用するなら、ALB の構成も同時に考慮する必要がある
2. **フロントエンド → ロードバランサー → バックエンドの順番が良いか？**
   - Next.js のフロントエンドはバックエンドなしでも通信失敗表示になるだけで起動可能
   - したがって、フロントエンドを先にデプロイしても問題はない
   - 最もスムーズなのは **バックエンド → ロードバランサー → フロントエンド** の順番

### 事前確認済みのポイント

- **Docker Compose で Next.js + Gin の疎通確認をローカルで実施済み、成功**
- **フロントエンド・バックエンドともに一つの Fargate クラスターにデプロイする**
  - **管理のしやすさを考慮**
  - **Next.js の SSR (サーバーサイドレンダリング) を利用するため**

### 次のアクション

- 第一段階の Fargate デプロイを実施し、最低限の動作確認を行う
- ALB を追加し、ロードバランサー経由の通信を確立
- フロントエンドとバックエンドの最適なデプロイフローを決定

ALBを初期に設定しておくと、ユーザークライアント観点からの呼び出し元が確定するので作業は固定化されるのでラク
デメリットはALB作成、削除に少々、数分掛かる耐えれる時間量 RDSやEKS等とは比較にならない

そもそもこの構成の場合どういうシグナルの流れなのだろう

ロードバランサー → Next.js → gin?

それとも

Next.js  →  ロードバランサー → gin?



